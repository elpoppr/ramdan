// script.js
document.addEventListener("DOMContentLoaded", function () {
    let userLocation;

    //  Ќѕнѕ гжёЏ «бг” ќѕг
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                userLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                };
                fetchPrayerTimes(userLocation);
                fetchWeather(userLocation);
            },
            (error) => {
                alert(" Џ–— «бЌ’жб Џбм гжёЏя. н—ћм  ЁЏнб ќѕг… «бгжёЏ.");
                // «” ќѕ«г гжёЏ «Ё —«÷н (гЋ«б: гя… «бгя—г…)
                userLocation = { lat: 21.4225, lng: 39.8262 };
                fetchPrayerTimes(userLocation);
                fetchWeather(userLocation);
            }
        );
    } else {
        alert("«бг ’ЁЌ б« нѕЏг ќѕг… «бгжёЏ.");
        // «” ќѕ«г гжёЏ «Ё —«÷н (гЋ«б: гя… «бгя—г…)
        userLocation = { lat: 21.4225, lng: 39.8262 };
        fetchPrayerTimes(userLocation);
        fetchWeather(userLocation);
    }

    // ћб» √жё«  «б’б«… »д«Ѕр Џбм «бгжёЏ
    function fetchPrayerTimes(location) {
        const apiUrl = `https://api.aladhan.com/v1/timings?latitude=${location.lat}&longitude=${location.lng}&method=2`;
        fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                const timings = data.data.timings;

                // Џ—÷ √жё«  «б’б«…
                const prayerTimes = [
                    { name: "«бЁћ—", time: timings.Fajr },
                    { name: "«б‘—жё", time: timings.Sunrise },
                    { name: "«бўе—", time: timings.Dhuhr },
                    { name: "«бЏ’—", time: timings.Asr },
                    { name: "«бгџ—»", time: timings.Maghrib },
                    { name: "«бЏ‘«Ѕ", time: timings.Isha },
                ];

                const tableBody = document.getElementById("prayerTable");
                tableBody.innerHTML = ""; // г”Ќ «бћѕжб «бёѕнг
                prayerTimes.forEach(prayer => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${prayer.name}</td>
                        <td>${prayer.time}</td>
                    `;
                    tableBody.appendChild(row);
                });

                //  Џннд жё  «б≈ЁЎ«— ж«б”Ќж—
                const iftarTime = timings.Maghrib;
                const suhoorTime = timings.Fajr;

                document.getElementById("iftarTime").textContent = iftarTime;
                document.getElementById("suhoorTime").textContent = suhoorTime;

                // гƒё   д«“бн бб≈ЁЎ«— ж«б”Ќж—
                setCountdown(iftarTime, "countdownIftar");
                setCountdown(suhoorTime, "countdownSuhoor");
            })
            .catch(error => console.error("Error fetching prayer times:", error));
    }

    // ћб» Ќ«б… «бЎё” »д«Ѕр Џбм «бгжёЏ
    function fetchWeather(location) {
        const weatherApiKey = "YOUR_WEATHER_API_KEY"; // «” »ѕб »гЁ «Ќ API «бќ«’ »я
        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${location.lat}&lon=${location.lng}&appid=${weatherApiKey}&units=metric&lang=ar`)
            .then(response => response.json())
            .then(data => {
                const weatherInfo = document.getElementById("weatherInfo");
                weatherInfo.textContent = `«бЌ—«—…: ${data.main.temp}∞C, «бЎё”: ${data.weather[0].description}`;
            })
            .catch(error => {
                console.error("Error fetching weather data:", error);
                document.getElementById("weatherInfo").textContent = " Џ–—  Ќгнб »н«д«  «бЎё”.";
            });
    }

    // ѕ«б… «бгƒё  «б д«“бн
    function setCountdown(targetTime, elementId) {
        const countdownElement = document.getElementById(elementId);

        function updateCountdown() {
            const now = new Date();
            const targetDate = new Date(`${now.toDateString()} ${targetTime}`);

            if (now > targetDate) {
                targetDate.setDate(targetDate.getDate() + 1); // «б«д ё«б ббнжг «б «бн
            }

            const timeDiff = targetDate - now;
            const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);

            countdownElement.textContent = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }

        setInterval(updateCountdown, 1000);
        updateCountdown();
    }

    // ж÷Џ бнбн
    const darkModeToggle = document.getElementById("darkModeToggle");
    darkModeToggle.addEventListener("click", () => {
        document.body.classList.toggle("dark-mode");
    });

    // “— ё—¬д я—нг
    const quranButton = document.getElementById("quranButton");
    quranButton.addEventListener("click", () => {
        window.open("html.html");
    });

    // ќ—нЎ… «бг”«ћѕ
    let map;
    let service;

    function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
            center: userLocation || { lat: 21.4225, lng: 39.8262 }, // гя… «бгя—г… ягжёЏ «Ё —«÷н
            zoom: 12,
        });

        service = new google.maps.places.PlacesService(map);

        document.getElementById("findMosquesButton").addEventListener("click", findNearbyMosques);
    }

    function findNearbyMosques() {
        if (!userLocation) {
            alert(" Џ–— «бЌ’жб Џбм гжёЏя.");
            return;
        }

        const request = {
            location: userLocation,
            radius: 5000, // 5 янбжг —
            keyword: "г”ћѕ",
        };

        service.nearbySearch(request, (results, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                results.forEach((place) => {
                    new google.maps.Marker({
                        position: place.geometry.location,
                        map: map,
                        title: place.name,
                    });
                });
            } else {
                alert(" Џ–— «бЏЋж— Џбм г”«ћѕ ё—н»….");
            }
        });
    }

    // √ѕЏн… нжгн… (30 ѕЏ«Ѕр)
    const duas = [
        "«ббег √Џдн Џбм –я—я ж‘я—я жЌ”д Џ»«ѕ я.",
        "«ббег ≈дн √”√бя Џбг«р д«ЁЏ«р° ж—“ё«р Ўн»«р° жЏгб«р г ё»б«р.",
        "«ббег «—“ёдн Ќ”д «бќ« г….",
        "«ббег «џЁ— бн жбж«бѕн жббгƒгднд нжг нёжг «бЌ”«».",
        "«ббег ≈дн √”√бя —÷«я ж«бћд…° ж√Џж– »я гд ”ќЎя ж«бд«—.",
        "«ббег «ћЏбдн гд «б ж«»нд ж«ћЏбдн гд «бг Ўе—нд.",
        "«ббег ≈дн √”√бя «бЏЁж ж«бЏ«Ён… Ён «бѕдн« ж«б¬ќ—….",
        "«ббег ≈дн √”√бя «бЁ—ѕж” «б√Џбм гд «бћд….",
        "«ббег ≈дн √”√бя Ќ”д «бќ« г….",
        "«ббег ≈дн √”√бя «беѕм ж«б ём ж«бЏЁ«Ё ж«бџдм.",
        "«ббег ≈дн √”√бя «бћд… жг« ё—» ≈бне« гд ёжб √ж Џгб.",
        "«ббег ≈дн √”√бя «бдћ«… гд «бд«—.",
        "«ббег ≈дн √”√бя «б—÷« »Џѕ «бё÷«Ѕ.",
        "«ббег ≈дн √”√бя «б»—я… Ён «бЏг— ж«б’Ќ… ж«бЏгб.",
        "«ббег ≈дн √”√бя «б’»— Џдѕ «б»б«Ѕ ж«б‘я— Џдѕ «б—ќ«Ѕ.",
        "«ббег ≈дн √”√бя Ќ”д «бўд »я.",
        "«ббег ≈дн √”√бя «бЏЁж ж«бЏ«Ён… Ён ѕндн жѕдн«н ж√ебн жг«бн.",
        "«ббег ≈дн √”√бя «б” — ж«бЏ«Ён… Ён «бѕдн« ж«б¬ќ—….",
        "«ббег ≈дн √”√бя «бгџЁ—… ж«б—Ќг….",
        "«ббег ≈дн √”√бя «бЋ»«  Џбм «бѕнд.",
        "«ббег ≈дн √”√бя «бёж… Ён «бЏ»«ѕ….",
        "«ббег ≈дн √”√бя «б жЁнё Ён яб √гж—н.",
        "«ббег ≈дн √”√бя «бЁ—ћ »Џѕ «б‘ѕ….",
        "«ббег ≈дн √”√бя «б√гд нжг «бЁ“Џ «б√я»—.",
        "«ббег ≈дн √”√бя «бћд… ждЏнге«.",
        "«ббег ≈дн √”√бя «бдћ«… гд «бд«— жЏ–«»е«.",
        "«ббег ≈дн √”√бя Ќ”д «бЏгб жќ« г е.",
        "«ббег ≈дн √”√бя «б’»— Џбм Ў«Џ я.",
        "«ббег ≈дн √”√бя «бЏЁж Џдѕ «бгЏ’н….",
        "«ббег ≈дн √”√бя «б—÷« »«бё÷«Ѕ.",
    ];

    // √”∆б… «бг”«»ё… (30 ”ƒ«б«р)
    const quizQuestions = [
        { question: "г« ен √жб ¬н… д“б  Ён «бё—¬дњ", answer: "«ё—√" },
        { question: "яг Џѕѕ ”ж— «бё—¬дњ", answer: "114" },
        { question: "г« ен √Ўжб ”ж—… Ён «бё—¬дњ", answer: "«б»ё—…" },
        { question: "г« ен √ё’— ”ж—… Ён «бё—¬дњ", answer: "«бяжЋ—" },
        { question: "гд еж √жб д»нњ", answer: "¬ѕг" },
        { question: "гд еж ќ« г «б√д»н«Ѕњ", answer: "гЌгѕ" },
        { question: "г« ен «б”ж—… «б н  ”гм ёб» «бё—¬дњ", answer: "н”" },
        { question: "г« ен «б”ж—… «б н  ”гм √г «бя «»њ", answer: "«бЁ« Ќ…" },
        { question: "яг Џѕѕ √—я«д «б≈”б«гњ", answer: "5" },
        { question: "г« ен √—я«д «б≈”б«гњ", answer: "«б‘е«ѕ…° «б’б«…° «б“я«…° «б’жг° «бЌћ" },
        { question: "г« ен √—я«д «б≈нг«дњ", answer: "«б≈нг«д »«ббе° гб«∆я е° я »е° —”бе° «бнжг «б¬ќ—° «бёѕ— ќн—е ж‘—е" },
        { question: "г« ен √Џўг ¬н… Ён «бё—¬дњ", answer: "¬н… «бя—”н" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «б жѕнЏњ", answer: "«бд’—" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бд”«Ѕ «б’џ—мњ", answer: "«бЎб«ё" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бЌж«—нндњ", answer: "«б’Ё" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бЁ—«∆÷њ", answer: "«бд”«Ѕ" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бдЏгњ", answer: "«бдЌб" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бЏёжѕњ", answer: "«бг«∆ѕ…" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бё «бњ", answer: "гЌгѕ" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бЌ‘—њ", answer: "«бЌ‘—" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «б ж»…њ", answer: "«б ж»…" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бЁ—ё«дњ", answer: "«бЁ—ё«д" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бгбяњ", answer: "«бгбя" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бгƒгдњ", answer: "џ«Ё—" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «б”ћѕ…њ", answer: "«б”ћѕ…" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бЌ«ё…њ", answer: "«бЌ«ё…" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бён«г…њ", answer: "«бён«г…" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «б≈д”«дњ", answer: "«б≈д”«д" },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бг—”б« њ", answer: "«бг—”б« " },
        { question: "г« ен «б”ж—… «б н  ”гм ”ж—… «бд»√њ", answer: "«бд»√" },
    ];

    // Џ—÷ ѕЏ«Ѕ «бнжг
    const dailyDua = document.getElementById("dailyDua");
    const today = new Date().getDate(); // «бнжг «бЌ«бн гд «б‘е—
    dailyDua.textContent = duas[today - 1]; // Џ—÷ «бѕЏ«Ѕ «бгд«”» ббнжг

    // Џ—÷ ”ƒ«б «бнжг
    const quizQuestionElement = document.getElementById("quizQuestion");
    const quizAnswerElement = document.getElementById("quizAnswer");
    const quizResultElement = document.getElementById("quizResult");

    quizQuestionElement.textContent = quizQuestions[today - 1].question;

    document.getElementById("submitQuiz").addEventListener("click", () => {
        if (quizAnswerElement.value.trim().toLowerCase() === quizQuestions[today - 1].answer.toLowerCase()) {
            quizResultElement.textContent = "≈ћ«»… ’ЌнЌ…! ??";
            quizResultElement.style.color = "green";
        } else {
            quizResultElement.textContent = "≈ћ«»… ќ«Ў∆…° Ќ«жб г—… √ќ—м!";
            quizResultElement.style.color = "red";
        }
    });

    // г‘«—я… Џбм ж”«∆б «б ж«’б «б«ћ г«Џн
    function shareOnFacebook() {
        window.open("https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(window.location.href));
    }

    function shareOnTwitter() {
        window.open("https://twitter.com/intent/tweet?url=" + encodeURIComponent(window.location.href));
    }

    function shareOnWhatsApp() {
        window.open("https://api.whatsapp.com/send?text=" + encodeURIComponent(window.location.href));
    }

    // «б —ћг…
    function googleTranslateElementInit() {
        new google.translate.TranslateElement({ pageLanguage: 'ar' }, 'google_translate_element');
    }
});